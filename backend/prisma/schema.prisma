// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MODERATOR
  USER
}

enum LogType {
  INFO
  ADMIN
}

enum SubmissionStatus {
  WAITING
  JUDGING
  FINISHED
}

model Account {
  id                String  @id @default(cuid())
  username          String  @db.Citext @unique
  email             String  @db.Citext @unique
  password          String
  verificationCode  String?
  passwordResetCode String?
  refreshToken      String  @default("")
  verified          Boolean @default(false)
  role              Role    @default(USER)

  verifiedAt      DateTime?
  passwordResetAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  profile Profile?
  logs Log[]

  submissions Submission[]

  @@index([role])
}

model Profile {
  id  String @id @default(cuid())
  account Account @relation(fields: [accountId], references: [id])
  accountId String @unique
  firstName String?
  lastName String?
  birthDate DateTime?
  country String?
  city String?
  organization String?
  lastVisit DateTime?
  online Boolean @default(false)

  registered DateTime @default(now())

  imagePath String @default("default")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())

  following    Follows[] @relation("Following")
  followers    Follows[] @relation("Followers")

  @@index([country])
  @@index([organization])
  @@index([city])
}

model Follows {
  id          String   @id @default(cuid())
  follower    Profile  @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  following   Profile  @relation("Following", fields: [followingId], references: [id])
  followingId String

  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Log {
  id String @id @default(cuid())

  author Account @relation(fields: [authorId], references: [id])
  authorId String

  text String
  type LogType

  createdAt       DateTime  @default(now())
}

model Problem {
  id String @id @unique
  title String @default("")

  timeLimit Int @default(1000) // ms
  memoryLimit Int @default(256) // MB
  
  problemDescription String @default("")
  inputDescription String @default("")
  outputDescription String @default("")
  restrictions String @default("")

  public Boolean @default(false)

  checkerPath String?
  testCases ProblemTestCase[]
  solutions ProblemSolution[]
  submissions Submission[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt @default(now())
}

model ProblemSolution {
  id String @id @unique

  solutionPath String

  problem Problem @relation(fields: [problemId], references: [id])
  problemId String

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ProblemTestCase {
  id String @id @unique @default(cuid())

  inputFilePath String
  outputFilePath String

  problem Problem @relation(fields: [problemId], references: [id])
  problemId String

  visible Boolean @default(false)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Language {
  id String @id @unique
  fileExtension String

  compile Boolean
  compileCommand String

  runCommand String

  submissions Submission[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Submission {
  id String @id @unique @default(cuid())

  solutionPath String

  author Account @relation(fields: [authorId], references: [id])
  authorId String

  problem Problem @relation(fields: [problemId], references: [id])
  problemId String

  status SubmissionStatus @default(WAITING)
  verdict String @default("Waiting for bot")
  details String?

  language Language @relation(fields: [languageId], references: [id])
  languageId String

  execTime Float @default(0)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
